2008-07-10 Taura
	* ChangeLog : for release 3.03 started
	* qsub_wrap (qsub_wrap_server.init) : an easier interface to pass
	options to underlying qsub (--).
	* gxpc.py (login_method_configs.__init__) : gxpc.py now takes 
	advantage of the above.
	* gxpc.py (cmd_interpreter.mk_installer_cmd) : get rid of distinction
	between --real and --prepare.

2008-07-16 Taura
	* rsh and explore now support parameter substitution. include %p% in
	rsh config and supply args with explore -a p=xxx
	* xmake, mksh : now I believe $(shell === ...) becomes completely
	unnecessary. It automatically detects whether a command is executed
	normally or within $(shell === ...).

2008-07-27 Taura
	* gxpc.py (cmd_interpreter.find_daemon_addrs2) : handle cases where
	the host is extremely slow and gxpc.py takes 20 secs to bring up.
	it now waits up to 20 secs with exponentially backoff sleep time.

	* qsub_wrap (nqs_hitachi_system_option) : fixed regexp to get jobid
	from qsub output, so it can correctly skip messages before 
	"Request ..." line.

	* xmake (xmake_server.mk_lnk) : fixed a bug that links to output
	files are broken when --state_dir is given.

2008-09-02 Taura

	* gxpc.py (cmd_interpreter.mk_installer_cmd) :
	explore now supports --target_prefix option that specifies
	the directory of remote hosts under which gxp will be automatically
	copied.

	* xmake (xmake_server.find_matches) : 
	fixed the phenomena that xmake.log sometimes grows very large.

	* bcp (ring_connector.transfer) :
	bcp supports several options for performance tuning/investigation.

	
2008-10-10 Taura
	* expectd.py (expectd.spawn) :
	it now uses pipe, not socketpair, when creating a child process.
	this is to avoid failing to create socket in /tmp (in broken /tmp
	permission).

	* gxpc.py (cmd_interpreter.add_up_pipe):
	* gxpc.py (cmd_interpreter.add_down_pipe):
	ditto
	
2008-11-19 Taura
        * gxpc.py (cmd_interpreter.mk_explore_cmd) :
	changed the semantics of use, so that use torque X Y means
	Y is reacheable via ssh from hosts whose TARGET NAME 
	(not HOSTNAME) matches X. Now the following works reliably.
	  use torque myhost hogehoge
	  use torque hogehoge hahahaha
	  explore hogehoge hahahaha

	* tmsub,tmsub.rb
	added support for obtaining resources via TORQUE psched API.
	* gxpc.py (cmd_interpreter) :
	added -t and -T to global and e options, to allow hosts to be 
	selected based on their target labels used in explore time.

2008-11-20 Taura
	* xmake (xmake_server.record_state)
	generate many html files when the state file gets too large.
	list of all jobs is also generated as a separate text file.
2008-11-20 Taura
	* gxpc.py (cmd_interpreter.create_daemon)
	added --root_target_name option with which you can specify
	the target name of the root daemon (as if the daemon has been
	reached by that name). 

2008-11-20 Taura
	* ifconfig.py
	* gxpbin/ifconfig.py
	* gxpbin/bcp
	* gxpbin/qsub_wrap
	* gxpbin/gifconfig
	Unified several slightly different versions of ifconfig.py 
	into one. Also add a standalone program gifconfig

2008-12-27 Taura
	* gxpc.py
	Remove 'as' field from use_cmd_opts so it works Python 2.6.
	
2008-12-29 Taura
	* gxpbin/qsub_wrap
	* gxpbin/qsub_wrap_client
	Fixed the problem that started occurring in T2K Kyoto recently.
	qsub on T2K kyoto started not working. There were two (or three)
	reasons.
	1. qsub on T2K Kyoto changed. It used to output job id to stdout, 
	but now	to stderr. Thus qsub_wrap failed to obtain its job id. 
	qsub_wrap now reads both stdout and stderr (first stdout, and 
	then stderr only when it failed to get it from the former). 
	2. qsub_wrap has recently changed to make it work on T2K Tokyo. 
	Before it used to generate a small qsub batch script file that
	invokes 'qsub_wrap --connect_to ... ', assuming the compute node 
	can access qsub_wrap file. This does not hold when the submitting 
	node and the compute node do not share the GXP3 top directory 
	(like in the case GXP3 is in /tmp). So it was 
	changed so that the batch script contains every necessary code
	(more precisely it contains a big 'cat <<EOF ... EOF' 
	command to emit	the qsub_wrap client script on the fly).
	This change, however, made the generated batch script big, 
	and it seems to	hit the limit of the system (well, it's 
	just about 32KB...). I wish the system handles this size, but 
	I worked around the limitation by triming the generated script. 
	A separate qsub_wrap_client file is the result.
	