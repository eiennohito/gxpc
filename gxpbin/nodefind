#!/usr/bin/env python
# Copyright (c) 2009 by Kenjiro Taura. All rights reserved.
# Copyright (c) 2008 by Kenjiro Taura. All rights reserved.
# Copyright (c) 2007 by Kenjiro Taura. All rights reserved.
# Copyright (c) 2006 by Kenjiro Taura. All rights reserved.
# Copyright (c) 2005 by Kenjiro Taura. All rights reserved.
#
# THIS MATERIAL IS PROVIDED AS IS, WITH ABSOLUTELY NO WARRANTY 
# EXPRESSED OR IMPLIED.  ANY USE IS AT YOUR OWN RISK.
# 
# Permission is hereby granted to use or copy this program
# for any purpose,  provided the above notices are retained on all 
# copies. Permission to modify the code and to distribute modified
# code is granted, provided the above notices are retained, and
# a notice that the code was modified is included with the above
# copyright notice.
#
# $Header: /cvsroot/gxp/gxp3/gxpbin/nodefind,v 1.3 2009/07/21 13:45:39 ttaauu Exp $
# $Name:  $
#

import os,re,socket,string,sys
from re import match

def Es(s):
    sys.stderr.write(s)

def Ws(s):
    sys.stdout.write(s)

class nodefind:
    def eval_builtins(self):
        global freem, freeg, host, hostname, name
        global exec_idx, idx
        freem = free / 1024.0
        freeg = free / (1024.0 * 1024.0)
        hostname = socket.gethostname()
        host = hostname
        name = hostname
        if os.environ.has_key("GXP_EXEC_IDX"):
            exec_idx = int(os.environ["GXP_EXEC_IDX"])
            idx = exec_idx

    def usage(self):
        if os.environ.has_key("GXP_EXEC_IDX"):
            exec_idx = int(os.environ["GXP_EXEC_IDX"])
            if exec_idx > 0: return
        Es(r"""usage:

  nodefind [--help] [expr]

  expr is a python expression containing the following variables.

    r  b  w   swpd   free   buff  cache
    si  so    bi    bo   in    cs  us  sy  id
    load1 load5 load15
    l1 l   l5    l15
    hostname host name
    exec_idx idx

see 'man vmstat' for the meaning of r ... id.
load1, load5, load15 are load average in the last one, five, fifteen
minutes, respectively (shown by uptime).
l1 and l are abbreviations of load1, l5 of load5, and l15 of load15.

hostname, host, and name are all hostnames obtained
by socket.gethostname() (perhaps the same as hostname command).
exec_idx and idx are GXP_EXEC_IDX.

  ex.
     gxpc e nodefind "l '<' 0.2"
     gxpc e nodefind "free '>' 300000"
     gxpc e nodefind 'match\(\"istbs0\", hostname\)'
     gxpc e nodefind idx == 0

You may need some practices to get used to shell escape characters.
     
""")

    def run_uptime(self):
        fp = os.popen("LANG=C uptime")
        out = fp.read()
        r = fp.close()
        m = re.search("load average: (.*), (.*), (.*)", out)
        if m is None:
            Es("wrong uptime output (%s)\n" % out)
            return None
        a,b,c = map(self.safe_atof, m.group(1, 2, 3))
        return { "load1"  : a, "l1" : a, "l" : a,
                 "load5"  : b, "l5" : b,
                 "load15" : c, "l15" : c  }

    def run_vmstat(self):
        fp = os.popen("vmstat")
        _ = fp.readline()
        header_line = fp.readline()
        value_line = fp.readline()
        r = fp.close()
        headers = string.split(header_line)
        values = string.split(value_line)
        if len(headers) != len(values):
            Es("wrong vmstat output (%s%s)\n" \
               % (header_line, value_line))
            return None
        V = {}
        for i in range(len(headers)):
            h = headers[i]
            v = values[i]
            V[h] = self.safe_atoi(v)
        return V

    def safe_atoi(self, x):
        try:
            return string.atoi(x)
        except:
            return x

    def safe_atof(self, x):
        try:
            return string.atof(x)
        except:
            return x

    def main(self, argv):
        i = 0
        for i in range(len(argv)):
            if argv[i] == "--help":
                self.usage()
                return 1
            else:
                break
        args = argv[i:]
        if len(args) == 0:
            expr = "l < 0.1"
        else:
            expr = string.join(args, " ")
            
        G = globals()
        L = self.run_uptime()
        V = self.run_vmstat()
        for k,v in L.items():
            G[k] = v
        for k,v in V.items():
            G[k] = v
        self.eval_builtins()
        try:
            r = eval(expr)
        except Exception,e:
            r = 0
            Es("%s in expression:\n\t%s\n" \
               % (e.args[0], expr))
        if r:
            Ws("%s\n" % hostname)
            return 0
        else:
            return 1

        
def main():
    nf = nodefind()
    return nf.main(sys.argv[1:])

if __name__ == "__main__":
    sys.exit(main())

# $Log: nodefind,v $
# Revision 1.3  2009/07/21 13:45:39  ttaauu
# fixed nodefind bug that fails without LANG=C
#
# Revision 1.2  2009/06/06 14:06:26  ttaauu
# added headers and logs
#
